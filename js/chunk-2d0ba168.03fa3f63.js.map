{"version":3,"sources":["webpack:///./src/service/account_service.js"],"names":["AccountService","username","password","email","user","LC","User","setUsername","setPassword","set","setEmail","Promise","resolve","reject","signUp","then","console","log","id","catch","error","code","logIn","Cloud","fromJson","logOut","resp","current","currentUser","currUser","this","image","name","img","File","save","file","get","u","change","emailVerified","mobilePhoneNumber","mobilePhoneVerified","nickname","avatar"],"mappings":"yLAWMA,G,sGAQF,SAAOC,EAAUC,GAAsB,IAAZC,EAAY,uDAAJ,GAC3BC,EAAO,IAAIC,IAAGC,KAQlB,OAPAF,EAAKG,YAAYN,GACjBG,EAAKI,YAAYN,GAEjBE,EAAKK,IAAI,WAAYR,GACjBE,GACAC,EAAKM,SAASP,GAEX,IAAIQ,SAAQ,SAACC,EAASC,GACzBT,EAAKU,SAASC,MAAK,SAAAX,GAEfY,QAAQC,IAAR,4BAAiCb,EAAKc,KACtCN,EAAQR,MACTe,OAAM,SAACC,GACNJ,QAAQC,IAAI,YAAaG,EAAMC,MAC/BR,EAAOO,W,mBAWnB,SAAMnB,EAAUC,GAAU,WACtB,OAAO,IAAIS,SAAQ,SAACC,EAASC,GACzBR,IAAGC,KAAKgB,MAAMrB,EAAUC,GAAUa,MAAK,SAAAX,GAEnCC,IAAGkB,MACHX,EAAQ,EAAKY,SAASpB,OACvBe,OAAM,SAAAC,GAELJ,QAAQC,IAAI,YAAaG,GACzBP,EAAOO,W,oBASnB,WACI,OAAO,IAAIT,SAAQ,SAACC,EAASC,GACzBR,IAAGC,KAAKmB,SAASV,MAAK,SAAAW,GAElBd,EAAQP,IAAGC,KAAKqB,cACjBR,OAAM,SAAAC,GAELP,EAAO,WAAYO,W,wBAQ/B,WACI,IAAIQ,EAAcvB,IAAGC,KAAKqB,UAC1B,OAAIC,IAGG,I,yBAIX,WAEI,IAAIxB,EAAOC,IAAGC,KAAKqB,UACnB,GAAIvB,EAAM,CACN,IAAIyB,EAAWC,KAAKN,SAASpB,GAG7B,OAFAY,QAAQC,IAAI,iBAAkBY,GAEvBA,EAEX,OAAO,O,0BAMX,SAAaE,GAAO,WAChB,OAAO,IAAIpB,SAAQ,SAACC,EAASC,GACzB,IAAIT,EAAOC,IAAGC,KAAKqB,UACfK,EAAOD,EAAMC,KACbC,EAAM,IAAI5B,IAAG6B,KAAKF,EAAMD,GAE5BE,EAAIE,OACCpB,MAAK,SAAAqB,GACFpB,QAAQC,IAAI,gBAAiBmB,GAE7BhC,EAAKK,IAAI,SAAU2B,EAAKC,IAAI,QAC5BjC,EAAK+B,OAAOpB,MAAK,SAAAuB,GAEbjC,IAAGC,KAAKqB,UAAUY,SAClB3B,EAAQ,EAAKY,SAASc,UAG7BnB,OAAM,SAAAC,GACHP,EAAOO,W,sBAOvB,SAAShB,GACL,MAAO,CACHc,GAAId,EAAKc,GACTjB,SAAUG,EAAKiC,IAAI,YACnBlC,MAAOC,EAAKiC,IAAI,SAChBG,cAAepC,EAAKiC,IAAI,iBACxBI,kBAAmBrC,EAAKiC,IAAI,qBAC5BK,oBAAqBtC,EAAKiC,IAAI,uBAC9BM,SAAUvC,EAAKiC,IAAI,YACnBO,OAAQxC,EAAKiC,IAAI,e,MAMd,WAAIrC","file":"js/chunk-2d0ba168.03fa3f63.js","sourcesContent":["/*\r\n * @Author: your name\r\n * @Date: 2021-05-25 09:40:04\r\n * @LastEditTime: 2021-05-31 13:50:16\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\acme-store-app\\src\\service\\account_service.js\r\n */\r\nimport LC from 'leancloud-storage';  // 导入 leancloud 数据存储模块\r\nimport { invalid } from 'moment';\r\n\r\nclass AccountService {\r\n    /**\r\n     * 注册帐号\r\n     * @param {*} username \r\n     * @param {*} password \r\n     * @param {*} email \r\n     * @returns \r\n     */\r\n    signUp(username, password, email = '') {\r\n        let user = new LC.User();\r\n        user.setUsername(username);\r\n        user.setPassword(password);\r\n        // 注册时, 用户昵称 与 用户名相同\r\n        user.set('nickname', username);\r\n        if (email) {\r\n            user.setEmail(email);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            user.signUp().then(user => {\r\n                // \r\n                console.log(`新用户注册成功，objectId: ${user.id}`);\r\n                resolve(user);\r\n            }).catch((error) => {\r\n                console.log('signUp():', error.code);\r\n                reject(error);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 用户登录\r\n     * @param {*} username \r\n     * @param {*} password \r\n     */\r\n    logIn(username, password) {\r\n        return new Promise((resolve, reject) => {\r\n            LC.User.logIn(username, password).then(user => {\r\n                // \r\n                LC.Cloud\r\n                resolve(this.fromJson(user));\r\n            }).catch(error => {\r\n                // \r\n                console.log('logIn(): ', error)\r\n                reject(error);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 注册, 退出登录\r\n     */\r\n    logOut() {\r\n        return new Promise((resolve, reject) => {\r\n            LC.User.logOut().then(resp => {\r\n                // \r\n                resolve(LC.User.current());\r\n            }).catch(error => {\r\n                // \r\n                reject('logOut()', error);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    // 用户是否登录, 这个可以用下面的 currentUser() 代替\r\n    // 因为不知道这个函数是否已经有使用, 所以还是留着吧.\r\n    isLoggedIn() {\r\n        let currentUser = LC.User.current(); // 获取当前用户\r\n        if (currentUser) {\r\n            return currentUser;    // 已有登录用户，返回当前用户\r\n        }\r\n        return false;     // 没有用户登录，返回false\r\n    };\r\n\r\n    // 获取当前已登录的用户, 本地数据不需要 Promise\r\n    currentUser() {\r\n        // return new Promise((resolve, reject) => {\r\n        var user = LC.User.current();\r\n        if (user) {\r\n            var currUser = this.fromJson(user);\r\n            console.log('current user: ', currUser);\r\n            // resolve(currUser);\r\n            return currUser;\r\n        }\r\n        return null;\r\n        // reject(user);\r\n        // });\r\n    }\r\n\r\n    // 更新用户头像\r\n    updateAvatar(image) {\r\n        return new Promise((resolve, reject) => {\r\n            var user = LC.User.current();  // 获取当前用户\r\n            let name = image.name;  // 获取图像文件名\r\n            let img = new LC.File(name, image);   // 创建文件对象\r\n            // 保存文件(上传到服务器)\r\n            img.save()\r\n                .then(file => {\r\n                    console.log('update file: ', file);\r\n                    // 设置用户 avatar 字段的值\r\n                    user.set('avatar', file.get('url'));\r\n                    user.save().then(u => {\r\n                        // 更新当前用户的数据\r\n                        LC.User.current().change();\r\n                        resolve(this.fromJson(u));\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n\r\n    // 将从服务器读取的一个用户数据转为对象格式, 以方便调用\r\n    fromJson(user) {\r\n        return {\r\n            id: user.id,\r\n            username: user.get('username'),\r\n            email: user.get('email'),\r\n            emailVerified: user.get('emailVerified'),\r\n            mobilePhoneNumber: user.get('mobilePhoneNumber'),\r\n            mobilePhoneVerified: user.get('mobilePhoneVerified'),\r\n            nickname: user.get('nickname'),\r\n            avatar: user.get('avatar') ,\r\n        };\r\n    }\r\n\r\n}\r\n\r\nexport default new AccountService();"],"sourceRoot":""}